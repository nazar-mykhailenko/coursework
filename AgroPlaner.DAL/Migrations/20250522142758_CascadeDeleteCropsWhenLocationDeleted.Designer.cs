// <auto-generated />
using System;
using AgroPlaner.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgroPlaner.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250522142758_CascadeDeleteCropsWhenLocationDeleted")]
    partial class CascadeDeleteCropsWhenLocationDeleted
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgroPlaner.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Crop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CumulativeGDDToday")
                        .HasColumnType("float");

                    b.Property<double>("ExpectedYield")
                        .HasColumnType("float");

                    b.Property<double>("FieldArea")
                        .HasColumnType("float");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlantingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SoilDataId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.FertilizationEvent", b =>
                {
                    b.Property<int>("FertilizationEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FertilizationEventId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("NitrogenAmount")
                        .HasColumnType("float");

                    b.Property<double>("PhosphorusAmount")
                        .HasColumnType("float");

                    b.Property<double>("PotassiumAmount")
                        .HasColumnType("float");

                    b.Property<int>("SoilDataId")
                        .HasColumnType("int");

                    b.HasKey("FertilizationEventId");

                    b.HasIndex("SoilDataId");

                    b.ToTable("FertilizationEvents");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.IrrigationEvent", b =>
                {
                    b.Property<int>("IrrigationEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IrrigationEventId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoilDataId")
                        .HasColumnType("int");

                    b.HasKey("IrrigationEventId");

                    b.HasIndex("SoilDataId");

                    b.ToTable("IrrigationEvents");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<double>("AllowableDepletionFraction")
                        .HasColumnType("float");

                    b.Property<double>("BaseTempForGDD")
                        .HasColumnType("float");

                    b.Property<double>("FertilizerNitrogenPercentage")
                        .HasColumnType("float");

                    b.Property<double>("FertilizerPhosphorusPercentage")
                        .HasColumnType("float");

                    b.Property<double>("FertilizerPotassiumPercentage")
                        .HasColumnType("float");

                    b.Property<string>("FertilizerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KcValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaturityGDD")
                        .HasColumnType("float");

                    b.Property<double>("MinSoilTempForSeeding")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NitrogenContent")
                        .HasColumnType("float");

                    b.Property<string>("NitrogenUptakeDistribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PhosphorusContent")
                        .HasColumnType("float");

                    b.Property<string>("PhosphorusUptakeDistribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PotassiumContent")
                        .HasColumnType("float");

                    b.Property<string>("PotassiumUptakeDistribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RootDepth")
                        .HasColumnType("float");

                    b.Property<double>("WiltingPoint")
                        .HasColumnType("float");

                    b.HasKey("PlantId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            PlantId = 1,
                            AllowableDepletionFraction = 0.40000000000000002,
                            BaseTempForGDD = 4.5,
                            FertilizerNitrogenPercentage = 15.0,
                            FertilizerPhosphorusPercentage = 15.0,
                            FertilizerPotassiumPercentage = 15.0,
                            FertilizerType = "15-15-15",
                            KcValues = "[0.5,0.825,1.15,0.75]",
                            MaturityGDD = 1200.0,
                            MinSoilTempForSeeding = 10.0,
                            Name = "Potato",
                            NitrogenContent = 4.2999999999999998,
                            NitrogenUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            PhosphorusContent = 1.3999999999999999,
                            PhosphorusUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            PotassiumContent = 5.7999999999999998,
                            PotassiumUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            RootDepth = 0.59999999999999998,
                            WiltingPoint = 50.0
                        },
                        new
                        {
                            PlantId = 2,
                            AllowableDepletionFraction = 0.40000000000000002,
                            BaseTempForGDD = 10.0,
                            FertilizerNitrogenPercentage = 15.0,
                            FertilizerPhosphorusPercentage = 15.0,
                            FertilizerPotassiumPercentage = 15.0,
                            FertilizerType = "15-15-15",
                            KcValues = "[0.6,0.875,1.15,0.8]",
                            MaturityGDD = 1000.0,
                            MinSoilTempForSeeding = 10.0,
                            Name = "Tomato",
                            NitrogenContent = 3.0,
                            NitrogenUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            PhosphorusContent = 1.2,
                            PhosphorusUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            PotassiumContent = 4.2000000000000002,
                            PotassiumUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            RootDepth = 1.0,
                            WiltingPoint = 50.0
                        },
                        new
                        {
                            PlantId = 3,
                            AllowableDepletionFraction = 0.55000000000000004,
                            BaseTempForGDD = 0.0,
                            FertilizerNitrogenPercentage = 15.0,
                            FertilizerPhosphorusPercentage = 15.0,
                            FertilizerPotassiumPercentage = 15.0,
                            FertilizerType = "15-15-15",
                            KcValues = "[0.3,0.75,1.15,0.65]",
                            MaturityGDD = 2900.0,
                            MinSoilTempForSeeding = 4.0,
                            Name = "Wheat",
                            NitrogenContent = 20.0,
                            NitrogenUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            PhosphorusContent = 8.0,
                            PhosphorusUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            PotassiumContent = 4.5,
                            PotassiumUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            RootDepth = 1.5,
                            WiltingPoint = 50.0
                        },
                        new
                        {
                            PlantId = 4,
                            AllowableDepletionFraction = 0.5,
                            BaseTempForGDD = 10.0,
                            FertilizerNitrogenPercentage = 15.0,
                            FertilizerPhosphorusPercentage = 15.0,
                            FertilizerPotassiumPercentage = 15.0,
                            FertilizerType = "15-15-15",
                            KcValues = "[0.3,0.75,1.2,0.5]",
                            MaturityGDD = 1500.0,
                            MinSoilTempForSeeding = 10.0,
                            Name = "Corn",
                            NitrogenContent = 21.0,
                            NitrogenUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            PhosphorusContent = 7.0,
                            PhosphorusUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            PotassiumContent = 5.0,
                            PotassiumUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            RootDepth = 1.2,
                            WiltingPoint = 50.0
                        },
                        new
                        {
                            PlantId = 5,
                            AllowableDepletionFraction = 0.45000000000000001,
                            BaseTempForGDD = 5.0,
                            FertilizerNitrogenPercentage = 15.0,
                            FertilizerPhosphorusPercentage = 15.0,
                            FertilizerPotassiumPercentage = 15.0,
                            FertilizerType = "15-15-15",
                            KcValues = "[0.35,0.8,1.2,0.7]",
                            MaturityGDD = 1000.0,
                            MinSoilTempForSeeding = 4.0,
                            Name = "Beetroot",
                            NitrogenContent = 3.5,
                            NitrogenUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            PhosphorusContent = 1.5,
                            PhosphorusUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            PotassiumContent = 5.0,
                            PotassiumUptakeDistribution = "[0.2,0.4,0.3,0.1]",
                            RootDepth = 0.80000000000000004,
                            WiltingPoint = 50.0
                        });
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.PlantGrowthStage", b =>
                {
                    b.Property<int>("PlantGrowthStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantGrowthStageId"));

                    b.Property<double>("MaxGDD")
                        .HasColumnType("float");

                    b.Property<double>("MinGDD")
                        .HasColumnType("float");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantGrowthStageId");

                    b.HasIndex("PlantId");

                    b.ToTable("PlantGrowthStage");

                    b.HasData(
                        new
                        {
                            PlantGrowthStageId = 1,
                            MaxGDD = 240.0,
                            MinGDD = 0.0,
                            OrderIndex = 0,
                            PlantId = 1,
                            StageName = "Initial"
                        },
                        new
                        {
                            PlantGrowthStageId = 2,
                            MaxGDD = 600.0,
                            MinGDD = 240.0,
                            OrderIndex = 0,
                            PlantId = 1,
                            StageName = "Development"
                        },
                        new
                        {
                            PlantGrowthStageId = 3,
                            MaxGDD = 960.0,
                            MinGDD = 600.0,
                            OrderIndex = 0,
                            PlantId = 1,
                            StageName = "Mid-season"
                        },
                        new
                        {
                            PlantGrowthStageId = 4,
                            MaxGDD = 1200.0,
                            MinGDD = 960.0,
                            OrderIndex = 0,
                            PlantId = 1,
                            StageName = "Late-season"
                        },
                        new
                        {
                            PlantGrowthStageId = 5,
                            MaxGDD = 200.0,
                            MinGDD = 0.0,
                            OrderIndex = 0,
                            PlantId = 2,
                            StageName = "Initial"
                        },
                        new
                        {
                            PlantGrowthStageId = 6,
                            MaxGDD = 500.0,
                            MinGDD = 200.0,
                            OrderIndex = 0,
                            PlantId = 2,
                            StageName = "Development"
                        },
                        new
                        {
                            PlantGrowthStageId = 7,
                            MaxGDD = 800.0,
                            MinGDD = 500.0,
                            OrderIndex = 0,
                            PlantId = 2,
                            StageName = "Mid-season"
                        },
                        new
                        {
                            PlantGrowthStageId = 8,
                            MaxGDD = 1000.0,
                            MinGDD = 800.0,
                            OrderIndex = 0,
                            PlantId = 2,
                            StageName = "Late-season"
                        },
                        new
                        {
                            PlantGrowthStageId = 9,
                            MaxGDD = 580.0,
                            MinGDD = 0.0,
                            OrderIndex = 0,
                            PlantId = 3,
                            StageName = "Initial"
                        },
                        new
                        {
                            PlantGrowthStageId = 10,
                            MaxGDD = 1450.0,
                            MinGDD = 580.0,
                            OrderIndex = 0,
                            PlantId = 3,
                            StageName = "Development"
                        },
                        new
                        {
                            PlantGrowthStageId = 11,
                            MaxGDD = 2320.0,
                            MinGDD = 1450.0,
                            OrderIndex = 0,
                            PlantId = 3,
                            StageName = "Mid-season"
                        },
                        new
                        {
                            PlantGrowthStageId = 12,
                            MaxGDD = 2900.0,
                            MinGDD = 2320.0,
                            OrderIndex = 0,
                            PlantId = 3,
                            StageName = "Late-season"
                        },
                        new
                        {
                            PlantGrowthStageId = 13,
                            MaxGDD = 300.0,
                            MinGDD = 0.0,
                            OrderIndex = 0,
                            PlantId = 4,
                            StageName = "Initial"
                        },
                        new
                        {
                            PlantGrowthStageId = 14,
                            MaxGDD = 750.0,
                            MinGDD = 300.0,
                            OrderIndex = 0,
                            PlantId = 4,
                            StageName = "Development"
                        },
                        new
                        {
                            PlantGrowthStageId = 15,
                            MaxGDD = 1200.0,
                            MinGDD = 750.0,
                            OrderIndex = 0,
                            PlantId = 4,
                            StageName = "Mid-season"
                        },
                        new
                        {
                            PlantGrowthStageId = 16,
                            MaxGDD = 1500.0,
                            MinGDD = 1200.0,
                            OrderIndex = 0,
                            PlantId = 4,
                            StageName = "Late-season"
                        },
                        new
                        {
                            PlantGrowthStageId = 17,
                            MaxGDD = 200.0,
                            MinGDD = 0.0,
                            OrderIndex = 0,
                            PlantId = 5,
                            StageName = "Initial"
                        },
                        new
                        {
                            PlantGrowthStageId = 18,
                            MaxGDD = 500.0,
                            MinGDD = 200.0,
                            OrderIndex = 0,
                            PlantId = 5,
                            StageName = "Development"
                        },
                        new
                        {
                            PlantGrowthStageId = 19,
                            MaxGDD = 800.0,
                            MinGDD = 500.0,
                            OrderIndex = 0,
                            PlantId = 5,
                            StageName = "Mid-season"
                        },
                        new
                        {
                            PlantGrowthStageId = 20,
                            MaxGDD = 1000.0,
                            MinGDD = 800.0,
                            OrderIndex = 0,
                            PlantId = 5,
                            StageName = "Late-season"
                        });
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.SoilData", b =>
                {
                    b.Property<int>("SoilDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoilDataId"));

                    b.Property<double>("AvailableNitrogen")
                        .HasColumnType("float");

                    b.Property<double>("AvailablePhosphorus")
                        .HasColumnType("float");

                    b.Property<double>("AvailablePotassium")
                        .HasColumnType("float");

                    b.Property<int>("CropId")
                        .HasColumnType("int");

                    b.Property<double>("CurrentMoisture")
                        .HasColumnType("float");

                    b.Property<double>("FieldCapacity")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("SoilDataId");

                    b.HasIndex("CropId")
                        .IsUnique();

                    b.ToTable("SoilData");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.WeatherData", b =>
                {
                    b.Property<int>("WeatherDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeatherDataId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<double>("MaxTemp")
                        .HasColumnType("float");

                    b.Property<double>("MinTemp")
                        .HasColumnType("float");

                    b.Property<double>("Precipitation")
                        .HasColumnType("float");

                    b.Property<double>("RelativeHumidity")
                        .HasColumnType("float");

                    b.Property<double>("SolarRadiation")
                        .HasColumnType("float");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("float");

                    b.HasKey("WeatherDataId");

                    b.HasIndex("LocationId");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Crop", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.Location", "Location")
                        .WithMany("Crops")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroPlaner.DAL.Models.Plant", "Plant")
                        .WithMany("Crops")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", "User")
                        .WithMany("Crops")
                        .HasForeignKey("UserId");

                    b.Navigation("Location");

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.FertilizationEvent", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.SoilData", "SoilData")
                        .WithMany("FertilizationHistory")
                        .HasForeignKey("SoilDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoilData");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.IrrigationEvent", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.SoilData", "SoilData")
                        .WithMany("IrrigationHistory")
                        .HasForeignKey("SoilDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoilData");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Location", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.PlantGrowthStage", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.Plant", "Plant")
                        .WithMany("PlantGrowthStages")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.SoilData", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.Crop", "Crop")
                        .WithOne("Soil")
                        .HasForeignKey("AgroPlaner.DAL.Models.SoilData", "CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.WeatherData", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.Location", "Location")
                        .WithMany("WeatherHistory")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.ApplicationUser", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Crop", b =>
                {
                    b.Navigation("Soil")
                        .IsRequired();
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Location", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("WeatherHistory");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Plant", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("PlantGrowthStages");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.SoilData", b =>
                {
                    b.Navigation("FertilizationHistory");

                    b.Navigation("IrrigationHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
