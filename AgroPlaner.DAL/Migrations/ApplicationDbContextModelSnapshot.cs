// <auto-generated />
using System;
using AgroPlaner.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgroPlaner.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgroPlaner.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Crop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CumulativeGDDToday")
                        .HasColumnType("float");

                    b.Property<double>("ExpectedYield")
                        .HasColumnType("float");

                    b.Property<double>("FieldArea")
                        .HasColumnType("float");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int?>("SoilDataId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.FertilizationEvent", b =>
                {
                    b.Property<int>("FertilizationEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FertilizationEventId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("NitrogenAmount")
                        .HasColumnType("float");

                    b.Property<double>("PhosphorusAmount")
                        .HasColumnType("float");

                    b.Property<double>("PotassiumAmount")
                        .HasColumnType("float");

                    b.Property<int>("SoilDataId")
                        .HasColumnType("int");

                    b.HasKey("FertilizationEventId");

                    b.HasIndex("SoilDataId");

                    b.ToTable("FertilizationEvents");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.IrrigationEvent", b =>
                {
                    b.Property<int>("IrrigationEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IrrigationEventId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoilDataId")
                        .HasColumnType("int");

                    b.HasKey("IrrigationEventId");

                    b.HasIndex("SoilDataId");

                    b.ToTable("IrrigationEvents");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<double>("AllowableDepletionFraction")
                        .HasColumnType("float");

                    b.Property<double>("BaseTempForGDD")
                        .HasColumnType("float");

                    b.Property<double>("FertilizerNitrogenPercentage")
                        .HasColumnType("float");

                    b.Property<double>("FertilizerPhosphorusPercentage")
                        .HasColumnType("float");

                    b.Property<double>("FertilizerPotassiumPercentage")
                        .HasColumnType("float");

                    b.Property<string>("FertilizerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KcValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaturityGDD")
                        .HasColumnType("float");

                    b.Property<double>("MinSoilTempForSeeding")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NitrogenContent")
                        .HasColumnType("float");

                    b.Property<string>("NitrogenUptakeDistribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PhosphorusContent")
                        .HasColumnType("float");

                    b.Property<string>("PhosphorusUptakeDistribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PotassiumContent")
                        .HasColumnType("float");

                    b.Property<string>("PotassiumUptakeDistribution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RootDepth")
                        .HasColumnType("float");

                    b.Property<double>("WiltingPoint")
                        .HasColumnType("float");

                    b.HasKey("PlantId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.PlantGrowthStage", b =>
                {
                    b.Property<int>("PlantGrowthStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantGrowthStageId"));

                    b.Property<double>("MaxGDD")
                        .HasColumnType("float");

                    b.Property<double>("MinGDD")
                        .HasColumnType("float");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantGrowthStageId");

                    b.HasIndex("PlantId");

                    b.ToTable("PlantGrowthStage");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.SoilData", b =>
                {
                    b.Property<int>("SoilDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoilDataId"));

                    b.Property<double>("AvailableNitrogen")
                        .HasColumnType("float");

                    b.Property<double>("AvailablePhosphorus")
                        .HasColumnType("float");

                    b.Property<double>("AvailablePotassium")
                        .HasColumnType("float");

                    b.Property<int>("CropId")
                        .HasColumnType("int");

                    b.Property<double>("CurrentMoisture")
                        .HasColumnType("float");

                    b.Property<double>("FieldCapacity")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("SoilDataId");

                    b.HasIndex("CropId")
                        .IsUnique();

                    b.ToTable("SoilData");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.WeatherData", b =>
                {
                    b.Property<int>("WeatherDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeatherDataId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<double>("MaxTemp")
                        .HasColumnType("float");

                    b.Property<double>("MinTemp")
                        .HasColumnType("float");

                    b.Property<double>("Precipitation")
                        .HasColumnType("float");

                    b.Property<double>("RelativeHumidity")
                        .HasColumnType("float");

                    b.Property<double>("SolarRadiation")
                        .HasColumnType("float");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("float");

                    b.HasKey("WeatherDataId");

                    b.HasIndex("LocationId");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Crop", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.Location", "Location")
                        .WithMany("Crops")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgroPlaner.DAL.Models.Plant", "Plant")
                        .WithMany("Crops")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", "User")
                        .WithMany("Crops")
                        .HasForeignKey("UserId");

                    b.Navigation("Location");

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.FertilizationEvent", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.SoilData", "SoilData")
                        .WithMany("FertilizationHistory")
                        .HasForeignKey("SoilDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoilData");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.IrrigationEvent", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.SoilData", "SoilData")
                        .WithMany("IrrigationHistory")
                        .HasForeignKey("SoilDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoilData");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Location", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.PlantGrowthStage", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.Plant", "Plant")
                        .WithMany("PlantGrowthStages")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.SoilData", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.Crop", "Crop")
                        .WithOne("Soil")
                        .HasForeignKey("AgroPlaner.DAL.Models.SoilData", "CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.WeatherData", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.Location", "Location")
                        .WithMany("WeatherHistory")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AgroPlaner.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.ApplicationUser", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Crop", b =>
                {
                    b.Navigation("Soil")
                        .IsRequired();
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Location", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("WeatherHistory");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.Plant", b =>
                {
                    b.Navigation("Crops");

                    b.Navigation("PlantGrowthStages");
                });

            modelBuilder.Entity("AgroPlaner.DAL.Models.SoilData", b =>
                {
                    b.Navigation("FertilizationHistory");

                    b.Navigation("IrrigationHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
